---
layout: post
title:  "699. Falling Squares"
date:   2020-09-09 21:07:01 +0100
categories: [leetcode, algorithm, SegmentTree]
---

# [Problem](https://leetcode.com/problems/falling-squares/)

# Solution  (segment tree with lazy propagation)

## version 1

```python

class Node(object):
    def __init__(self,low,hi,v):
        self.low = low
        self.hi = hi
        self.val = v
        self.lazy = -1
        self.left = None
        self.right = None

class SegTree(object):
    def __init__(self,N):
        self.root = Node(0,N,0)
    def query(self,l,r):
        return self.queryhlp(self.root,l,r)
    def update(self,l,r,val):
        return self.updatehlp(self.root,l,r,val)
    def queryhlp(self,root,l,r):
        self.push(root)
        if l <= root.low and root.hi <= r:
            return root.val
        if l > root.hi or r < root.low:
            return 0
        mid = (root.low + root.hi)//2
        res = float('-inf')
        if l <= mid:
            res = max(res,self.queryhlp(root.left,l,r))
        if r > mid:
            res = max(res,self.queryhlp(root.right,l,r))
        return res
    def updatehlp(self,root,l,r,val):
        if l <= root.low and root.hi <= r:
            root.lazy = val
        self.push(root)
        if (l <= root.low and root.hi <= r) or l > root.hi or r < root.low:
            return 
        mid = (root.low + root.hi)//2
        #if l <= mid:
        self.updatehlp(root.left,l,r,val)
        #if r > mid:
        self.updatehlp(root.right,l,r,val)
        root.val = max(root.left.val,root.right.val)
    def push(self,root):
        if root.lazy != -1:
            root.val = root.lazy
        if root.low != root.hi:
            mid = root.low + (root.hi- root.low)//2
            if root.left == None:
                root.left = Node(root.low,mid,root.val)
            if root.right == None:
                root.right = Node(mid+1,root.hi,root.val)
            if root.lazy != -1:
                root.left.lazy = root.lazy
                root.right.lazy = root.lazy
        root.lazy = -1

class Solution(object):
    def fallingSquares(self, positions):
        """
        :type positions: List[List[int]]
        :rtype: List[int]
        """
        ans = []
        maxl = 0
        for p in positions:
            maxl = max(maxl,sum(p))
        tree = SegTree(maxl)
        for pos in positions:
            cubel = pos[0]
            cuber = pos[0]+pos[1]-1
            cubeh = pos[1]
            val = tree.query(cubel,cuber)
            tree.update(cubel,cuber,cubeh+val)
            ans.append(tree.root.val)
        return ans

```

## version 2


```python

class Node(object):
    def __init__(self,low,hi,v):
        self.low = low
        self.hi = hi
        self.val = v
        self.left = None
        self.right = None

class SegTree(object):
    def __init__(self,N):
        self.root = Node(0,N,0)
    def query(self,l,r):
        return self.queryhlp(self.root,l,r)
    def update(self,l,r,val):
        return self.updatehlp(self.root,l,r,val)
    def queryhlp(self,root,l,r):
        if l <= root.low and root.hi <= r:
            return root.val
        mid = (root.low + root.hi)//2
        if root.left == None:
            root.left = Node(root.low,mid,root.val)
        if root.right == None:
            root.right = Node(mid+1, root.hi, root.val)
        res = float('-inf')
        if l <= mid:
            res = max(res,self.queryhlp(root.left,l,r))
        if r > mid:
            res = max(res,self.queryhlp(root.right,l,r))
        return res
    def updatehlp(self,root,l,r,val):
        if l <= root.low and root.hi <= r:
            root.val = val
            root.left = None
            root.right = None
            return
        mid = (root.low + root.hi)//2
        if root.left == None:
            root.left = Node(root.low,mid,root.val)
        if root.right == None:
            root.right = Node(mid+1, root.hi, root.val)
        if l <= mid:
            self.updatehlp(root.left,l,r,val)
        if r > mid:
            self.updatehlp(root.right,l,r,val)
        root.val = max(root.left.val,root.right.val)

class Solution(object):
    def fallingSquares(self, positions):
        """
        :type positions: List[List[int]]
        :rtype: List[int]
        """
        ans = []
        maxl = 0
        for p in positions:
            maxl = max(maxl,sum(p))
        tree = SegTree(maxl)
        for pos in positions:
            cubel = pos[0]
            cuber = pos[0]+pos[1]-1
            cubeh = pos[1]
            val = tree.query(cubel,cuber)
            tree.update(cubel,cuber,cubeh+val)
            ans.append(tree.root.val)
        return ans
         

```

## 307 range sum query

```python

class FWTree(object):
    def __init__(self,n):
        self.data = [0 for _ in range(n+1)]
    def lowbit(self,x):
        return x & (-1*x)
    def update(self,i,delta):
        while i < len(self.data):
            self.data[i] += delta
            i += self.lowbit(i)
    def query(self,i):
        ans = 0
        while i > 0:
            ans += self.data[i]
            i -= self.lowbit(i)
        return ans

class Node(object):
    def __init__(self,s,e,val):
        self.start = s
        self.end = e
        self.val = val
        self.left = None
        self.right = None
        
class SegTree(object):
    def __init__(self,nums):
        self.root = self.build(nums,0,len(nums)-1)
    def build(self,nums,i,j):
        if i > j:
            return None
        if i == j:
            return Node(i,j,nums[i])
        node = Node(i,j,0)
        mid = i + (j-i)//2
        node.left = self.build(nums,i,mid)
        node.right = self.build(nums,mid+1,j)
        node.val = node.left.val + node.right.val
        return node
    def update(self,pos,val):
        return self.updatehlp(self.root,pos,val)
    def updatehlp(self,root,pos,val):
        if root.start == root.end and root.end == pos:
            root.val = val
            return
        mid = root.start + (root.end-root.start)//2
        if pos <= mid:
            self.updatehlp(root.left,pos,val)
        else:
            self.updatehlp(root.right,pos,val)
        root.val = root.left.val + root.right.val
        return
    def query(self,i,j):
        return self.queryhlp(self.root,i,j)
    def queryhlp(self,root,i,j):
        if i <= root.start and root.end <= j:
            return root.val
        mid = root.start + (root.end-root.start)//2
        ans = 0
        if i <= mid:
            ans += self.queryhlp(root.left,i,j)
        if j >= mid+1:
            ans += self.queryhlp(root.right,i,j)
        return ans
            
            
        
    
    
class NumArray(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        """
        #self.fwt = FWTree(len(nums))
        #self.nums = nums
        #for i in range(len(nums)):
        #    self.fwt.update(i+1,nums[i])
        self.stree = SegTree(nums)

    def update(self, i, val):
        """
        :type i: int
        :type val: int
        :rtype: None
        """
        #self.fwt.update(i+1,val-self.nums[i])
        #self.nums[i] = val
        self.stree.update(i,val)
        

    def sumRange(self, i, j):
        """
        :type i: int
        :type j: int
        :rtype: int
        """
        #return self.fwt.query(j+1) - self.fwt.query(i)
        return  self.stree.query(i,j)
        


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(i,val)
# param_2 = obj.sumRange(i,j)

```
